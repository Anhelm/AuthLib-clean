plugins {
    id 'java'
    id 'signing'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'ru.keeperjerry.authlib'
archivesBaseName = 'authlib'
version = '2.0.27'

configurations {
    provided {
        compile.extendsFrom(provided)
    }

    build.dependsOn("signJar")
}

repositories {
    jcenter()
}

dependencies {
    provided("com.google.code.gson:gson:2.8.0")
    provided("com.google.guava:guava:21.0")
    provided("commons-codec:commons-codec:1.10")
    provided("commons-io:commons-io:2.5")
    provided("org.apache.commons:commons-lang3:3.5")
    provided("org.apache.logging.log4j:log4j-core:2.0-beta9")
    provided("com.google.code.findbugs:jsr305:3.0.2")
    annotationProcessor("org.apache.logging.log4j:log4j-core:2.0-beta9")
}

jar {
    from {
        (configurations.compile - configurations.provided).findAll({
            it.isDirectory() || it.name.endsWith(".jar")
        }).collect({
            it.isDirectory() ? it : zipTree(it)
        })
    }
}

processResources {
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                    jar: it,
                    alias: project.property("signing.alias"),
                    storepass: project.property("signing.keyStorePassword"),
                    keystore: project.property("signing.keyStorePath"),
                    keypass: project.property("signing.keyStorePassword"),
                    preservelastmodified: project.property("signing.preserveLastModified"),
                    tsaurl: project.property("signing.timestampAuthority"),
                    digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}
